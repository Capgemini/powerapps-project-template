jobs:
  - job: BuildAndTestJob
    variables:
      - name: GitVersion.SemVer
        value: ""
    displayName: Build and Test

    steps:
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: "5.x"

      - task: gitversion/execute@0
        displayName: Execute GitVersion
        inputs:
          useConfigFile: true
          configFilePath: '$(Build.SourcesDirectory)\GitVersion.yml'
          updateAssemblyInfo: true

      - pwsh: Write-Host '##vso[task.setvariable variable=SemVer;isOutput=true]$(GitVersion.SemVer)'
        name: OutputSemVerTask
        displayName: Output SemVer

      - task: Npm@1
        displayName: Increment Package Version
        inputs:
          command: custom
          customCommand: version $(GitVersion.SemVer) --git-tag-version false

      - task: Npm@1
        displayName: Install NPM Dependencies
        inputs:
          verbose: true

      - task: SonarCloudPrepare@1
        displayName: Prepare SonarCloud
        inputs:
          SonarCloud: "SonarCloud"
          organization: "capgemini-1"
          scannerMode: "CLI"
          configMode: "file"
          extraProperties: |
            soner.projectVersion=$(GitVersion.SemVer)
            sonar.eslint.reportPaths=$(Build.SourcesDirectory)/test_results/analysis/eslint.json

      - task: Npm@1
        displayName: Lint Package
        inputs:
          command: custom
          customCommand: run lint
        continueOnError: true

      - task: Npm@1
        displayName: Build Package
        inputs:
          command: custom
          customCommand: run build

      - task: SonarCloudAnalyze@1
        displayName: Analyse with SonarCloud

      - task: SonarCloudPublish@1
        displayName: Publish SonarCloud results
        inputs:
          pollingTimeoutSec: "300"

      - task: WhiteSource Bolt@20
        displayName: Detect security and licence issues
        inputs:
          cwd: "$(Build.SourcesDirectory)"

      - task: Npm@1
        displayName: Pack Package
        inputs:
          command: custom
          customCommand: pack

      - task: CopyFiles@2
        displayName: Copy package
        inputs:
          Contents: "capgeminiuk-generator-powerapps-project-*.tgz"
          TargetFolder: $(Build.ArtifactStagingDirectory)/out

      - publish: $(Build.ArtifactStagingDirectory)/out
        displayName: Publish NPM artifact
        artifact: powerapps-project-generator
